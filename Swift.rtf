{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Bold;
\f3\fswiss\fcharset0 Helvetica-Light;\f4\fnil\fcharset0 LucidaGrande;\f5\fnil\fcharset0 HelveticaNeue-Light;
}
{\colortbl;\red255\green255\blue255;\red50\green50\blue50;\red64\green110\blue116;\red181\green0\blue19;
\red109\green109\blue109;\red167\green23\blue144;\red20\green0\blue196;\red91\green42\blue150;\red38\green38\blue38;
\red184\green14\blue61;\red247\green238\blue241;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid101\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid201\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid301\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid401\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid501\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid601\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid701\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid801\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid901\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1001\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1101\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1201\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1301\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid14}
{\list\listtemplateid15\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1401\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid15}
{\list\listtemplateid16\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid1501\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid16}
{\list\listtemplateid17\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1601\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid17}
{\list\listtemplateid18\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1701\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid18}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}{\listoverride\listid15\listoverridecount0\ls15}{\listoverride\listid16\listoverridecount0\ls16}{\listoverride\listid17\listoverridecount0\ls17}{\listoverride\listid18\listoverridecount0\ls18}}
\margl1440\margr1440\vieww24640\viewh14200\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 Learning Swift programming\
https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/index.html\
\
\pard\pardeftab720\sa300\partightenfactor0

\b0\fs28 \cf2 - You don\'92t need to import a separate library for functionality like input/output or string handling.
\b\fs24 \cf0  
\f1\b0 \cf3 println\cf0 (\cf4 "Hello, world"\cf0 ). 
\f0\fs28 \cf2 Don\'92t need to write semicolons at the end of every statement.\
- Use 
\f1\fs24 \cf5 let
\f0\fs28 \cf2  to make a constant and 
\f1\fs24 \cf5 var
\f0\fs28 \cf2  to make a variable. The value of a constant doesn\'92t need to be known at compile time, but you must assign it a value exactly once.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f1\fs24 \cf6 		var\cf0  \cf3 myVariable\cf0  = \cf7 42
\f0\fs28 \cf0 \
\ls1\ilvl0
\f1\fs24 \cf3 		myVariable\cf0  = \cf7 50
\f0\fs28 \cf0 \
\ls1\ilvl0
\f1\fs24 \cf6 		let\cf0  \cf3 myConstant\cf0  = \cf7 42\
\pard\tx720\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \
- If the initial value doesn\'92t provide enough information (or if there is no initial value), specify the type by writing it after the variable, separated by a colon.\
\pard\pardeftab720\partightenfactor0

\fs22 \cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0
\f1\fs24 \cf6 		let\cf0  \cf3 implicitInteger\cf0  = \cf7 70
\f0\fs28 \cf0 \
\ls2\ilvl0
\f1\fs24 \cf6 		let\cf0  \cf3 implicitDouble\cf0  = \cf7 70.0
\f0\fs28 \cf0 \
\ls2\ilvl0
\f1\fs24 \cf6 		let\cf0  \cf3 explicitDouble\cf0 : \cf8 Double\cf0  = \cf7 70\
\pard\pardeftab720\sa300\partightenfactor0

\f0\fs28 \cf2 \
- Values are never implicitly converted to another type. If you need to convert a value to a different type, explicitly make an instance of the desired type.\
\pard\pardeftab720\partightenfactor0

\fs22 \cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0
\f1\fs24 \cf6 		let\cf0  \cf3 label\cf0  = \cf4 "The width is "
\f0\fs28 \cf0 \
\ls3\ilvl0
\f1\fs24 \cf6 		let\cf0  \cf3 width\cf0  = \cf7 94
\f0\fs28 \cf0 \
\ls3\ilvl0
\f1\fs24 \cf6 		let\cf0  \cf3 widthLabel\cf0  = \cf3 label\cf0  + \cf3 String\cf0 (\cf3 width\cf0 )
\f0\fs28 \cf2 \
\pard\pardeftab720\sa300\partightenfactor0

\f1\fs24 \cf0 \

\f0\fs28 \cf2 - Create arrays and dictionaries using brackets (
\f1\fs24 \cf5 []
\f0\fs28 \cf2 ), and access their elements by writing the index or key in brackets.\
\pard\pardeftab720\partightenfactor0

\fs22 \cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0
\f1\fs24 \cf6 		var\cf0  \cf3 shoppingList\cf0  = [\cf4 "catfish"\cf0 , \cf4 "water"\cf0 , \cf4 "tulips"\cf0 , \cf4 "blue paint"\cf0 ]
\f0\fs28 \
\ls4\ilvl0
\f1\fs24 \cf3 		shoppingList\cf0 [\cf7 1\cf0 ] = \cf4 "bottle of water"
\f0\fs28 \cf0 \
\ls4\ilvl0
\f1\fs24 		 
\f0\fs28 \
\ls4\ilvl0
\f1\fs24 \cf6 		var\cf0  \cf3 occupations\cf0  = [
\f0\fs28 \
\ls4\ilvl0
\f1\fs24 		    \cf4 "Malcolm"\cf0 : \cf4 "Captain"\cf0 ,
\f0\fs28 \
\ls4\ilvl0
\f1\fs24 		    \cf4 "Kaylee"\cf0 : \cf4 "Mechanic"\cf0 ,
\f0\fs28 \
\ls4\ilvl0
\f1\fs24 		]
\f0\fs28 \
\ls4\ilvl0
\f1\fs24 \cf3 		occupations\cf0 [\cf4 "Jayne"\cf0 ] = \cf4 "Public Relations"\
\pard\tx720\pardeftab720\partightenfactor0
\cf0 \
	
\f0\fs28 \cf2 To create an empty array or dictionary, use the initializer syntax.\
\pard\pardeftab720\partightenfactor0

\fs22 \cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0
\f1\fs24 \cf6 		let\cf0  \cf3 emptyArray\cf0  = [\cf3 String\cf0 ]()
\f0\fs28 \
\ls5\ilvl0
\f1\fs24 \cf6 		let\cf0  \cf3 emptyDictionary\cf0  = \cf3 Dictionary\cf0 <\cf8 String\cf0 , \cf8 Float\cf0 >()\
\pard\tx720\pardeftab720\partightenfactor0
\cf0 \
	
\f0\fs28 \cf2 If type information can be inferred, you can write an empty array as 
\f2\b\fs24 \cf5 []
\f0\b0\fs28 \cf2  and an empty dictionary as 
\f2\b\fs24 \cf5 [:]
\f0\b0\fs28 \cf2 \'97for example, when you set a new value for a variable or pass an argument to a function.\
\pard\pardeftab720\partightenfactor0

\fs22 \cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0
\f1\fs24 \cf3 		shoppingList\cf0  = []\
\pard\tx720\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\sa300\partightenfactor0

\f0\b\fs44 \cf5 Control Flow
\f3\b0 \
\pard\pardeftab720\sa300\partightenfactor0

\f0\fs28 \cf2 - Use 
\f1\fs24 \cf5 if
\f0\fs28 \cf2  and 
\f1\fs24 \cf5 switch
\f0\fs28 \cf2  to make conditionals, and use 
\f1\fs24 \cf5 for
\f0\fs28 \cf2 -
\f1\fs24 \cf5 in
\f0\fs28 \cf2 , 
\f1\fs24 \cf5 for
\f0\fs28 \cf2 , 
\f1\fs24 \cf5 while
\f0\fs28 \cf2 , and 
\f1\fs24 \cf5 do
\f0\fs28 \cf2 -
\f1\fs24 \cf5 while
\f0\fs28 \cf2  to make loops. Parentheses around the condition or loop variable are optional. Braces around the body are required.\
- 
\b You use 
\f2\fs24 \cf5 for
\f0\fs28 \cf2 -
\f2\fs24 \cf5 in
\f0\fs28 \cf2  to iterate over items in a array
\b0 \
	
\f1\fs24 \cf6 let\cf0  \cf3 individualScores\cf0  = [\cf7 75\cf0 , \cf7 43\cf0 , \cf7 103\cf0 , \cf7 87\cf0 , \cf7 12\cf0 ]
\f0\fs28 \
	
\f1\fs24 \cf6 var\cf0  \cf3 teamScore\cf0  = \cf7 0
\f0\fs28 \cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls7\ilvl0
\f1\fs24 \cf6 		for\cf0  \cf3 score\cf0  \cf6 in\cf0  \cf3 individualScores\cf0  \{
\f0\fs28 \
\ls7\ilvl0
\f1\fs24 		    \cf6 if\cf0  \cf3 score\cf0  > \cf7 50\cf0  \{
\f0\fs28 \
\ls7\ilvl0
\f1\fs24 		        \cf3 teamScore\cf0  += \cf7 3
\f0\fs28 \cf0 \
\ls7\ilvl0
\f1\fs24 		    \} \cf6 else\cf0  \{
\f0\fs28 \
\ls7\ilvl0
\f1\fs24 		        \cf3 teamScore\cf0  += \cf7 1
\f0\fs28 \cf0 \
\ls7\ilvl0
\f1\fs24 		    \}
\f0\fs28 \
\ls7\ilvl0
\f1\fs24 		\}
\f0\fs28 \
\ls7\ilvl0
\f1\fs24 \cf3 		teamScore\
\pard\tx720\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sa300\partightenfactor0

\f0\fs28 \cf2 - 
\b You use 
\f2\fs24 \cf5 for
\f0\fs28 \cf2 -
\f2\fs24 \cf5 in
\f0\fs28 \cf2  to iterate over items in a dictionary by providing a pair of names to use for each key-value pair.
\b0 \
\pard\pardeftab720\partightenfactor0

\fs22 \cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0
\f1\fs24 \cf6 		let\cf0  \cf3 interestingNumbers\cf0  = [
\f0\fs28 \
\ls8\ilvl0
\f1\fs24 		    \cf4 "Prime"\cf0 : [\cf7 2\cf0 , \cf7 3\cf0 , \cf7 5\cf0 , \cf7 7\cf0 , \cf7 11\cf0 , \cf7 13\cf0 ],
\f0\fs28 \
\ls8\ilvl0
\f1\fs24 		    \cf4 "Fibonacci"\cf0 : [\cf7 1\cf0 , \cf7 1\cf0 , \cf7 2\cf0 , \cf7 3\cf0 , \cf7 5\cf0 , \cf7 8\cf0 ],
\f0\fs28 \
\ls8\ilvl0
\f1\fs24 		    \cf4 "Square"\cf0 : [\cf7 1\cf0 , \cf7 4\cf0 , \cf7 9\cf0 , \cf7 16\cf0 , \cf7 25\cf0 ],
\f0\fs28 \
\ls8\ilvl0
\f1\fs24 		]
\f0\fs28 \
\ls8\ilvl0
\f1\fs24 \cf6 		var\cf0  \cf3 largest\cf0  = \cf7 0
\f0\fs28 \cf0 \
\ls8\ilvl0
\f1\fs24 \cf6 		for\cf0  (\cf3 kind\cf0 , \cf3 numbers\cf0 ) \cf6 in\cf0  \cf3 interestingNumbers\cf0  \{
\f0\fs28 \
\ls8\ilvl0
\f1\fs24 		    \cf6 for\cf0  \cf3 number\cf0  \cf6 in\cf0  \cf3 numbers\cf0  \{
\f0\fs28 \
\ls8\ilvl0
\f1\fs24 		        \cf6 if\cf0  \cf3 number\cf0  > \cf3 largest\cf0  \{
\f0\fs28 \
\ls8\ilvl0
\f1\fs24 		            \cf3 largest\cf0  = \cf3 number
\f0\fs28 \cf0 \
\ls8\ilvl0
\f1\fs24 		        \}
\f0\fs28 \
\ls8\ilvl0
\f1\fs24 		    \}
\f0\fs28 \
\ls8\ilvl0
\f1\fs24 		\}
\f0\fs28 \
\ls8\ilvl0
\f1\fs24 \cf3 		largest\
\pard\tx720\pardeftab720\partightenfactor0

\f0\fs28 \cf2 	\
	In an 
\f1\fs24 \cf5 if
\f0\fs28 \cf2  statement, the conditional must be a Boolean expression\'97
\b this means that code such as 
\f2\fs24 \cf5 if score \{ ... \}
\f0\fs28 \cf2  is an error,
\b0  not an implicit comparison to zero.\
\
	Write a question mark (
\f1\fs24 \cf5 ?
\f0\fs28 \cf2 ) after the type of a value to mark the value as optional.\
	
\f1\fs24 \cf6 var\cf0  \cf3 optionalString\cf0 : \cf8 String\cf0 ? = \cf4 "Hello"\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls9\ilvl0\cf3 		optionalString\cf0  == \cf6 nil
\f0\fs28 \cf0 \
\ls9\ilvl0
\f1\fs24 		 
\f0\fs28 \
\ls9\ilvl0
\f1\fs24 \cf6 		var\cf0  \cf3 optionalName\cf0 : \cf8 String\cf0 ? = \cf4 "John Appleseed"
\f0\fs28 \cf0 \
\ls9\ilvl0
\f1\fs24 \cf6 		var\cf0  \cf3 greeting\cf0  = \cf4 "Hello!"
\f0\fs28 \cf0 \
\ls9\ilvl0
\f1\fs24 \cf6 		if\cf0  \cf6 let\cf0  \cf3 name\cf0  = \cf3 optionalName\cf0  \{
\f0\fs28 \
\ls9\ilvl0
\f1\fs24 		    \cf3 greeting\cf0  = \cf4 "Hello, \cf0 \\(\cf3 name\cf0 )\cf4 "
\f0\fs28 \cf0 \
\ls9\ilvl0
\f1\fs24 		\}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls9\ilvl0
\f0\fs28 \cf2 		If the optional value is 
\f1\fs24 \cf5 nil
\f0\fs28 \cf2 , the conditional is 
\f1\fs24 \cf5 false
\f0\fs28 \cf2  and the code in braces is skipped.\
\pard\pardeftab720\sa300\partightenfactor0

\f1\fs24 \cf0 \

\f0\fs28 \cf2 - keep an index in a loop\'97either by using 
\f1\fs24 \cf5 ..<
\f0\fs28 \cf2  to make a range of indexes or by writing an explicit initialization, condition, and increment. These two loops do the same thing:\
\pard\pardeftab720\partightenfactor0

\fs22 \cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls10\ilvl0
\f1\fs24 \cf6 		var\cf0  \cf3 firstForLoop\cf0  = \cf7 0
\f0\fs28 \cf0 \
\ls10\ilvl0
\f1\fs24 \cf6 		for\cf0  \cf3 i\cf0  \cf6 in\cf0  \cf7 0\cf0 ..<\cf7 4\cf0  \{
\f0\fs28 \
\ls10\ilvl0
\f1\fs24 		    \cf3 firstForLoop\cf0  += \cf3 i
\f0\fs28 \cf0 \
\ls10\ilvl0
\f1\fs24 		\}
\f0\fs28 \
\ls10\ilvl0
\f1\fs24 \cf3 		firstForLoop
\f0\fs28 \cf0 \
\ls10\ilvl0
\f1\fs24 		 
\f0\fs28 \
\ls10\ilvl0
\f1\fs24 \cf6 		var\cf0  \cf3 secondForLoop\cf0  = \cf7 0
\f0\fs28 \cf0 \
\ls10\ilvl0
\f1\fs24 \cf6 		for\cf0  \cf6 var\cf0  \cf3 i\cf0  = \cf7 0\cf0 ; \cf3 i\cf0  < \cf7 4\cf0 ; ++\cf3 i\cf0  \{
\f0\fs28 \
\ls10\ilvl0
\f1\fs24 		    \cf3 secondForLoop\cf0  += \cf3 i
\f0\fs28 \cf0 \
\ls10\ilvl0
\f1\fs24 		\}
\f0\fs28 \
\ls10\ilvl0
\f1\fs24 \cf3 		secondForLoop
\f0\fs28 \cf0 \
\pard\pardeftab720\sa300\partightenfactor0

\b \cf2 Use 
\f2\fs24 \cf5 ..<
\f0\fs28 \cf2  to make a range that omits its upper value, and use 
\f2\fs24 \cf5 ...
\f0\fs28 \cf2  to make a range that includes both values.\
\pard\pardeftab720\sa300\partightenfactor0

\fs44 \cf5 Functions and Closures
\f3\b0 \
\pard\pardeftab720\sa300\partightenfactor0

\f0\fs28 \cf2 Use 
\f1\fs24 \cf5 func
\f0\fs28 \cf2  to declare a function. Call a function by following its name with a list of arguments in parentheses. Use 
\f1\fs24 \cf5 ->
\f0\fs28 \cf2  to separate the parameter names and types from the function\'92s return type.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls11\ilvl0
\f1\fs24 \cf6 		func\cf0  \cf3 greet\cf0 (\cf3 name\cf0 : \cf8 String\cf0 , \cf3 day\cf0 : \cf8 String\cf0 ) -> \cf8 String\cf0  \{
\f0\fs28 \
\ls11\ilvl0
\f1\fs24 		    \cf6 return\cf0  \cf4 "Hello \cf0 \\(\cf3 name\cf0 )\cf4 , today is \cf0 \\(\cf3 day\cf0 )\cf4 ."
\f0\fs28 \cf0 \
\ls11\ilvl0
\f1\fs24 		\}
\f0\fs28 \
\ls11\ilvl0
\f1\fs24 \cf3 		greet\cf0 (name: \cf4 \'93Bob"\cf0 , day: \cf4 \'94Tuesday"\cf0 )\
\pard\tx720\pardeftab720\partightenfactor0
\cf0 \
	
\f0\b\fs28 \cf2 Use a tuple to return multiple values from a function.
\b0 \
\pard\pardeftab720\partightenfactor0

\fs22 \cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls12\ilvl0
\f1\fs24 \cf6 		func\cf0  \cf3 getGasPrices\cf0 () -> (\cf8 Double\cf0 , \cf8 Double\cf0 , \cf8 Double\cf0 ) \{
\f0\fs28 \
\ls12\ilvl0
\f1\fs24 		    \cf6 return\cf0  (\cf7 3.59\cf0 , \cf7 3.69\cf0 , \cf7 3.79\cf0 )
\f0\fs28 \
\ls12\ilvl0
\f1\fs24 		\}
\f0\fs28 \
\ls12\ilvl0
\f1\fs24 \cf3 		getGasPrices\cf0 ()\
\pard\tx720\pardeftab720\partightenfactor0
\cf0 	\
	
\f0\b\fs28 \cf2 Functions can also take a variable number of arguments, collecting them into an array.
\b0 \
\pard\pardeftab720\partightenfactor0

\fs22 \cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0
\f1\fs24 \cf6 		func\cf0  \cf3 sumOf\cf0 (\cf3 numbers\cf0 : \cf8 Int\cf0 ...) -> \cf8 Int\cf0  \{
\f0\fs28 \
\ls13\ilvl0
\f1\fs24 		    \cf6 var\cf0  \cf3 sum\cf0  = \cf7 0
\f0\fs28 \cf0 \
\ls13\ilvl0
\f1\fs24 		    \cf6 for\cf0  \cf3 number\cf0  \cf6 in\cf0  \cf3 numbers\cf0  \{
\f0\fs28 \
\ls13\ilvl0
\f1\fs24 		        \cf3 sum\cf0  += \cf3 number
\f0\fs28 \cf0 \
\ls13\ilvl0
\f1\fs24 		    \}
\f0\fs28 \
\ls13\ilvl0
\f1\fs24 		    \cf6 return\cf0  \cf3 sum
\f0\fs28 \cf0 \
\ls13\ilvl0
\f1\fs24 		\}
\f0\fs28 \
\ls13\ilvl0
\f1\fs24 \cf3 		sumOf\cf0 ()
\f0\fs28 \
\ls13\ilvl0
\f1\fs24 \cf3 		sumOf\cf0 (\cf7 42\cf0 , \cf7 597\cf0 , \cf7 12\cf0 )\
\pard\tx720\pardeftab720\partightenfactor0
\cf0 	\
	
\f0\b\fs28 \cf2 Functions are a first-class type. This means that a function can return another function as its value.
\b0 \
\pard\pardeftab720\partightenfactor0

\fs22 \cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls14\ilvl0
\f1\fs24 \cf6 		func\cf0  \cf3 makeIncrementer\cf0 () -> (\cf8 Int\cf0  -> \cf8 Int\cf0 ) \{
\f0\fs28 \
\ls14\ilvl0
\f1\fs24 		    \cf6 func\cf0  \cf3 addOne\cf0 (\cf3 number\cf0 : \cf8 Int\cf0 ) -> \cf8 Int\cf0  \{
\f0\fs28 \
\ls14\ilvl0
\f1\fs24 		        \cf6 return\cf0  \cf7 1\cf0  + \cf3 number
\f0\fs28 \cf0 \
\ls14\ilvl0
\f1\fs24 		    \}
\f0\fs28 \
\ls14\ilvl0
\f1\fs24 		    \cf6 return\cf0  \cf3 addOne
\f0\fs28 \cf0 \
\ls14\ilvl0
\f1\fs24 		\}
\f0\fs28 \
\ls14\ilvl0
\f1\fs24 \cf6 		var\cf0  \cf3 increment\cf0  = \cf3 makeIncrementer\cf0 ()
\f0\fs28 \
\ls14\ilvl0
\f1\fs24 \cf3 		increment\cf0 (\cf7 7\cf0 )\
\pard\tx720\pardeftab720\partightenfactor0
\cf0 \
	
\f0\b\fs28 \cf2 A function can take another function as one of its arguments.
\b0 \
\pard\pardeftab720\partightenfactor0

\fs22 \cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls15\ilvl0
\f1\fs24 \cf6 		func\cf0  \cf3 hasAnyMatches\cf0 (\cf3 list\cf0 : [\cf8 Int\cf0 ], \cf3 condition\cf0 : \cf8 Int\cf0  -> \cf8 Bool\cf0 ) -> \cf8 Bool\cf0  \{
\f0\fs28 \
\ls15\ilvl0
\f1\fs24 		    \cf6 for\cf0  \cf3 item\cf0  \cf6 in\cf0  \cf3 list\cf0  \{
\f0\fs28 \
\ls15\ilvl0
\f1\fs24 		        \cf6 if\cf0  \cf3 condition\cf0 (\cf3 item\cf0 ) \{
\f0\fs28 \
\ls15\ilvl0
\f1\fs24 		            \cf6 return\cf0  \cf6 true
\f0\fs28 \cf0 \
\ls15\ilvl0
\f1\fs24 		        \}
\f0\fs28 \
\ls15\ilvl0
\f1\fs24 		    \}
\f0\fs28 \
\ls15\ilvl0
\f1\fs24 		    \cf6 return\cf0  \cf6 false
\f0\fs28 \cf0 \
\ls15\ilvl0
\f1\fs24 		\}
\f0\fs28 \
\ls15\ilvl0
\f1\fs24 \cf6 		func\cf0  \cf3 lessThanTen\cf0 (\cf3 number\cf0 : \cf8 Int\cf0 ) -> \cf8 Bool\cf0  \{
\f0\fs28 \
\ls15\ilvl0
\f1\fs24 		    \cf6 return\cf0  \cf3 number\cf0  < \cf7 10
\f0\fs28 \cf0 \
\ls15\ilvl0
\f1\fs24 		\}
\f0\fs28 \
\ls15\ilvl0
\f1\fs24 \cf6 		var\cf0  \cf3 numbers\cf0  = [\cf7 20\cf0 , \cf7 19\cf0 , \cf7 7\cf0 , \cf7 12\cf0 ]
\f0\fs28 \
\ls15\ilvl0
\f1\fs24 \cf3 		hasAnyMatches\cf0 (\cf3 numbers\cf0 , \cf3 lessThanTen\cf0 )\
\pard\tx720\pardeftab720\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\sa300\partightenfactor0

\f3\fs44 \cf5 Objects and Classes\
\pard\tx720\pardeftab720\partightenfactor0

\f0\b\fs28 \cf2 Difference between struct and class\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls16\ilvl0
\b0 \cf2 {\listtext	
\f4 \uc0\u9642 
\f0 	}You don't get an automatic memberwise initializer for your classes; you need to write your own.\
{\listtext	
\f4 \uc0\u9642 
\f0 	}You can define a class as being based off another class, adding any new things you want.\
{\listtext	
\f4 \uc0\u9642 
\f0 	}If you copy an object, both copies point at the same data by default.\
\pard\tx720\pardeftab720\partightenfactor0

\f3\fs44 \cf5 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls17\ilvl0
\f1\fs24 \cf6 		class\cf0  \cf3 NamedShape\cf0  \{
\f0\fs28 \
\ls17\ilvl0
\f1\fs24 		    \cf6 var\cf0  \cf3 numberOfSides\cf0 : \cf8 Int\cf0  = \cf7 0
\f0\fs28 \cf0 \
\ls17\ilvl0
\f1\fs24 		    \cf6 var\cf0  \cf3 name\cf0 : \cf8 String
\f0\fs28 \cf0 \
\ls17\ilvl0
\f1\fs24 		    
\f0\fs28 \
\ls17\ilvl0
\f1\fs24 		    \cf6 init\cf0 (\cf3 name\cf0 : \cf8 String\cf0 ) \{
\f0\fs28 \
\ls17\ilvl0
\f1\fs24 		        \cf6 self\cf0 .\cf3 name\cf0  = \cf3 name
\f0\fs28 \cf0 \
\ls17\ilvl0
\f1\fs24 		    \}
\f0\fs28 \
\ls17\ilvl0
\f1\fs24 		    
\f0\fs28 \
\ls17\ilvl0
\f1\fs24 		    \cf6 func\cf0  \cf3 simpleDescription\cf0 () -> \cf8 String\cf0  \{
\f0\fs28 \
\ls17\ilvl0
\f1\fs24 		        \cf6 return\cf0  \cf4 "A shape with \cf0 \\(\cf3 numberOfSides\cf0 )\cf4  sides."
\f0\fs28 \cf0 \
\ls17\ilvl0
\f1\fs24 		    \}
\f0\fs28 \
\ls17\ilvl0
\f1\fs24 		\}\
\pard\tx720\pardeftab720\partightenfactor0
\cf0 \
	
\f0\fs28 \cf2 Subclasses include their superclass name after their class name, separated by a colon.\
\pard\pardeftab720\fi-260\partightenfactor0

\f1\fs24 \cf6 	class\cf0  \cf3 Square\cf0 : \cf8 NamedShape\cf0  \{\}\
\
	
\f0\fs28 \cf2 Methods on a subclass that override the superclass\'92s implementation are marked with 
\f1\fs24 \cf5 override
\f0\fs28 \cf2 \'97overriding a method by accident, without 
\f1\fs24 \cf5 override
\f0\fs28 \cf2 , is detected by the compiler as an error. The compiler also detects methods with 
\f1\fs24 \cf5 override
\f0\fs28 \cf2  that don\'92t actually override any method in the superclass.\
\
	In addition to simple properties that are stored, properties can have a getter and a setter.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0
\f1\fs24 \cf6 		class\cf0  \cf3 EquilateralTriangle\cf0 : \cf8 NamedShape\cf0  \{
\f0\fs28 \
\ls18\ilvl0
\f1\fs24 		    \cf6 var\cf0  \cf3 sideLength\cf0 : \cf8 Double\cf0  = \cf7 0.0
\f0\fs28 \cf0 \
\ls18\ilvl0
\f1\fs24 		    
\f0\fs28 \
\ls18\ilvl0
\f1\fs24 		    \cf6 init\cf0 (\cf3 sideLength\cf0 : \cf8 Double\cf0 , \cf3 name\cf0 : \cf8 String\cf0 ) \{
\f0\fs28 \
\ls18\ilvl0
\f1\fs24 		        \cf6 self\cf0 .\cf3 sideLength\cf0  = \cf3 sideLength
\f0\fs28 \cf0 \
\ls18\ilvl0
\f1\fs24 		        \cf6 super\cf0 .\cf6 init\cf0 (\cf3 name\cf0 : \cf3 name\cf0 )
\f0\fs28 \
\ls18\ilvl0
\f1\fs24 		        \cf3 numberOfSides\cf0  = \cf7 3
\f0\fs28 \cf0 \
\ls18\ilvl0
\f1\fs24 		    \}
\f0\fs28 \
\ls18\ilvl0
\f1\fs24 		    
\f0\fs28 \
\ls18\ilvl0
\f1\fs24 		    \cf6 var\cf0  \cf3 perimeter\cf0 : \cf8 Double\cf0  \{
\f0\fs28 \
\ls18\ilvl0
\f1\fs24 		    \cf6 get\cf0  \{
\f0\fs28 \
\ls18\ilvl0
\f1\fs24 		        \cf6 return\cf0  \cf7 3.0\cf0  * \cf3 sideLength
\f0\fs28 \cf0 \
\ls18\ilvl0
\f1\fs24 		    \}
\f0\fs28 \
\ls18\ilvl0
\f1\fs24 		    \cf6 set\cf0  \{
\f0\fs28 \
\ls18\ilvl0
\f1\fs24 		        \cf3 sideLength\cf0  = \cf3 newValue\cf0  / \cf7 3.0
\f0\fs28 \cf0 \
\ls18\ilvl0
\f1\fs24 		    \}
\f0\fs28 \
\ls18\ilvl0
\f1\fs24 		    \}
\f0\fs28 \
\ls18\ilvl0
\f1\fs24 		    
\f0\fs28 \
\ls18\ilvl0
\f1\fs24 		    \cf6 override\cf0  \cf6 func\cf0  \cf3 simpleDescription\cf0 () -> \cf8 String\cf0  \{
\f0\fs28 \
\ls18\ilvl0
\f1\fs24 		        \cf6 return\cf0  \cf4 "An equilateral triangle with sides of length \cf0 \\(\cf3 sideLength\cf0 )\cf4 ."
\f0\fs28 \cf0 \
\ls18\ilvl0
\f1\fs24 		    \}
\f0\fs28 \
\ls18\ilvl0
\f1\fs24 		\}
\f0\fs28 \
\ls18\ilvl0
\f1\fs24 \cf6 		var\cf0  \cf3 triangle\cf0  = \cf3 EquilateralTriangle\cf0 (\cf3 sideLength\cf0 : \cf7 3.1\cf0 , \cf3 name\cf0 : \cf4 "a triangle"\cf0 )
\f0\fs28 \
\ls18\ilvl0
\f1\fs24 \cf3 		triangle\cf0 .\cf3 perimeter
\f0\fs28 \cf0 \
\ls18\ilvl0
\f1\fs24 \cf3 		triangle\cf0 .\cf3 perimeter\cf0  = \cf7 9.9
\f0\fs28 \cf0 \
\ls18\ilvl0
\f1\fs24 \cf3 		triangle\cf0 .\cf3 sideLength\
\pard\tx720\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\sa300\partightenfactor0

\f0\fs28 \cf2 Use 
\f1\fs24 \cf5 struct
\f0\fs28 \cf2  to create a structure. Structures support many of the same behaviors as classes, including methods and initializers. 
\b One of the most important differences between structures and classes is that structures are always copied when they are passed around in your code, but classes are passed by reference.\
\pard\pardeftab720\partightenfactor0

\f5\b0\fs24 \cf9 \expnd0\expndtw0\kerning0
In terms of which is which: 
\f1 \cf10 \cb11 Int
\f5 \cf9 \cb1 , 
\f1 \cf10 \cb11 Double
\f5 \cf9 \cb1 , 
\f1 \cf10 \cb11 Float
\f5 \cf9 \cb1 , 
\f1 \cf10 \cb11 String
\f5 \cf9 \cb1  and 
\f1 \cf10 \cb11 Array
\f5 \cf9 \cb1  are all structs, 
\f1 \cf10 \cb11 UIViewController
\f5 \cf9 \cb1  and any 
\f1 \cf10 \cb11 UIView
\f5 \cf9 \cb1  are all classes.
\f1 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\pardeftab720\partightenfactor0
\cf0 \
}